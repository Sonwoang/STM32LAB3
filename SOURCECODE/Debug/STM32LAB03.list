
STM32LAB03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002750  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002880  08002880  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002880  08002880  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002880  08002880  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002884  08002884  00012884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000004c  080028d4  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080028d4  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009543  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba2  00000000  00000000  000295b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cf8  00000000  00000000  0002c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bafa  00000000  00000000  000432d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082464  00000000  00000000  0004edd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d4  00000000  00000000  000d128c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002844 	.word	0x08002844

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002844 	.word	0x08002844

0800014c <is_button_pressed>:
int bufferButton[N0_OF_BUTTONS] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int button_flag[N0_OF_BUTTONS];
int timerforkeypress[N0_OF_BUTTONS];

int is_button_pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <is_button_pressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <is_button_pressed+0x22>
        button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <is_button_pressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <is_button_pressed+0x24>
    }
    return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000078 	.word	0x20000078

08000180 <getKeyInput>:

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e012      	b.n	80001b2 <getKeyInput+0x32>
        keyReg2[i] = keyReg1[i];
 800018c:	4a44      	ldr	r2, [pc, #272]	; (80002a0 <getKeyInput+0x120>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4943      	ldr	r1, [pc, #268]	; (80002a4 <getKeyInput+0x124>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        keyReg1[i] = keyReg0[i];
 800019c:	4a42      	ldr	r2, [pc, #264]	; (80002a8 <getKeyInput+0x128>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493e      	ldr	r1, [pc, #248]	; (80002a0 <getKeyInput+0x120>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < N0_OF_BUTTONS; i++){
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	dde9      	ble.n	800018c <getKeyInput+0xc>
    }

    keyReg0[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001bc:	483b      	ldr	r0, [pc, #236]	; (80002ac <getKeyInput+0x12c>)
 80001be:	f001 fb2d 	bl	800181c <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b38      	ldr	r3, [pc, #224]	; (80002a8 <getKeyInput+0x128>)
 80001c8:	601a      	str	r2, [r3, #0]
    keyReg0[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ce:	4837      	ldr	r0, [pc, #220]	; (80002ac <getKeyInput+0x12c>)
 80001d0:	f001 fb24 	bl	800181c <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b33      	ldr	r3, [pc, #204]	; (80002a8 <getKeyInput+0x128>)
 80001da:	605a      	str	r2, [r3, #4]
    keyReg0[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80001dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e0:	4832      	ldr	r0, [pc, #200]	; (80002ac <getKeyInput+0x12c>)
 80001e2:	f001 fb1b 	bl	800181c <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b2f      	ldr	r3, [pc, #188]	; (80002a8 <getKeyInput+0x128>)
 80001ec:	609a      	str	r2, [r3, #8]

    for (int i = 0; i < N0_OF_BUTTONS; i++){
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	e04d      	b.n	8000290 <getKeyInput+0x110>
        if ((keyReg1[i] == keyReg0[i]) && (keyReg2[i] == keyReg1[i])){
 80001f4:	4a2a      	ldr	r2, [pc, #168]	; (80002a0 <getKeyInput+0x120>)
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	492a      	ldr	r1, [pc, #168]	; (80002a8 <getKeyInput+0x128>)
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d140      	bne.n	800028a <getKeyInput+0x10a>
 8000208:	4a26      	ldr	r2, [pc, #152]	; (80002a4 <getKeyInput+0x124>)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4923      	ldr	r1, [pc, #140]	; (80002a0 <getKeyInput+0x120>)
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d136      	bne.n	800028a <getKeyInput+0x10a>
            if (bufferButton[i] != keyReg0[i]){
 800021c:	4a24      	ldr	r2, [pc, #144]	; (80002b0 <getKeyInput+0x130>)
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4920      	ldr	r1, [pc, #128]	; (80002a8 <getKeyInput+0x128>)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022c:	429a      	cmp	r2, r3
 800022e:	d018      	beq.n	8000262 <getKeyInput+0xe2>
                bufferButton[i] = keyReg0[i];
 8000230:	4a1d      	ldr	r2, [pc, #116]	; (80002a8 <getKeyInput+0x128>)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000238:	491d      	ldr	r1, [pc, #116]	; (80002b0 <getKeyInput+0x130>)
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (bufferButton[i] == PRESSED_STATE){
 8000240:	4a1b      	ldr	r2, [pc, #108]	; (80002b0 <getKeyInput+0x130>)
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d11e      	bne.n	800028a <getKeyInput+0x10a>
                    button_flag[i] = 1;
 800024c:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <getKeyInput+0x134>)
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	2101      	movs	r1, #1
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    timerforkeypress[i] = DURATION / TICK;
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <getKeyInput+0x138>)
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	2132      	movs	r1, #50	; 0x32
 800025c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000260:	e013      	b.n	800028a <getKeyInput+0x10a>
                }
            } else {
                timerforkeypress[i]--;
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <getKeyInput+0x138>)
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	1e5a      	subs	r2, r3, #1
 800026c:	4912      	ldr	r1, [pc, #72]	; (80002b8 <getKeyInput+0x138>)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (timerforkeypress[i] == 0){
 8000274:	4a10      	ldr	r2, [pc, #64]	; (80002b8 <getKeyInput+0x138>)
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d104      	bne.n	800028a <getKeyInput+0x10a>
                    bufferButton[i] = NORMAL_STATE;
 8000280:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <getKeyInput+0x130>)
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	2101      	movs	r1, #1
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < N0_OF_BUTTONS; i++){
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	2b02      	cmp	r3, #2
 8000294:	ddae      	ble.n	80001f4 <getKeyInput+0x74>
                }
            }
        }
    }
}
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000000c 	.word	0x2000000c
 80002a4:	20000018 	.word	0x20000018
 80002a8:	20000000 	.word	0x20000000
 80002ac:	40011000 	.word	0x40011000
 80002b0:	20000024 	.word	0x20000024
 80002b4:	20000078 	.word	0x20000078
 80002b8:	20000084 	.word	0x20000084

080002bc <update_led7seg>:
 */
#include "fsm_automatic.h"

int led_buffer[4];

void update_led7seg(){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
    led_buffer[0] = led1_value / 10;
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <update_led7seg+0x70>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <update_led7seg+0x74>)
 80002c6:	fb82 1203 	smull	r1, r2, r2, r3
 80002ca:	1092      	asrs	r2, r2, #2
 80002cc:	17db      	asrs	r3, r3, #31
 80002ce:	1ad3      	subs	r3, r2, r3
 80002d0:	4a18      	ldr	r2, [pc, #96]	; (8000334 <update_led7seg+0x78>)
 80002d2:	6013      	str	r3, [r2, #0]
    led_buffer[1] = led1_value % 10;
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <update_led7seg+0x70>)
 80002d6:	6819      	ldr	r1, [r3, #0]
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <update_led7seg+0x74>)
 80002da:	fb83 2301 	smull	r2, r3, r3, r1
 80002de:	109a      	asrs	r2, r3, #2
 80002e0:	17cb      	asrs	r3, r1, #31
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	4613      	mov	r3, r2
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	4413      	add	r3, r2
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	1aca      	subs	r2, r1, r3
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <update_led7seg+0x78>)
 80002f0:	605a      	str	r2, [r3, #4]
    led_buffer[2] = led2_value / 10;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <update_led7seg+0x7c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <update_led7seg+0x74>)
 80002f8:	fb82 1203 	smull	r1, r2, r2, r3
 80002fc:	1092      	asrs	r2, r2, #2
 80002fe:	17db      	asrs	r3, r3, #31
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <update_led7seg+0x78>)
 8000304:	6093      	str	r3, [r2, #8]
    led_buffer[3] = led2_value % 10;
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <update_led7seg+0x7c>)
 8000308:	6819      	ldr	r1, [r3, #0]
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <update_led7seg+0x74>)
 800030c:	fb83 2301 	smull	r2, r3, r3, r1
 8000310:	109a      	asrs	r2, r3, #2
 8000312:	17cb      	asrs	r3, r1, #31
 8000314:	1ad2      	subs	r2, r2, r3
 8000316:	4613      	mov	r3, r2
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	4413      	add	r3, r2
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	1aca      	subs	r2, r1, r3
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <update_led7seg+0x78>)
 8000322:	60da      	str	r2, [r3, #12]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	20000070 	.word	0x20000070
 8000330:	66666667 	.word	0x66666667
 8000334:	20000090 	.word	0x20000090
 8000338:	20000074 	.word	0x20000074

0800033c <update_led_for_1s>:

void update_led_for_1s(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
    if (timer_flag[2] == 1){
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <update_led_for_1s+0x34>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d110      	bne.n	800036a <update_led_for_1s+0x2e>
        led1_value--;
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <update_led_for_1s+0x38>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	3b01      	subs	r3, #1
 800034e:	4a09      	ldr	r2, [pc, #36]	; (8000374 <update_led_for_1s+0x38>)
 8000350:	6013      	str	r3, [r2, #0]
        led2_value--;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <update_led_for_1s+0x3c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	3b01      	subs	r3, #1
 8000358:	4a07      	ldr	r2, [pc, #28]	; (8000378 <update_led_for_1s+0x3c>)
 800035a:	6013      	str	r3, [r2, #0]
        update_led7seg();
 800035c:	f7ff ffae 	bl	80002bc <update_led7seg>
        setTimer(2, 1000);
 8000360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000364:	2002      	movs	r0, #2
 8000366:	f000 fde7 	bl	8000f38 <setTimer>
    }
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200000f4 	.word	0x200000f4
 8000374:	20000070 	.word	0x20000070
 8000378:	20000074 	.word	0x20000074

0800037c <led7_segRun>:

void led7_segRun(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
    switch (led_status){
 8000380:	4b61      	ldr	r3, [pc, #388]	; (8000508 <led7_segRun+0x18c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b04      	cmp	r3, #4
 8000386:	f200 80b3 	bhi.w	80004f0 <led7_segRun+0x174>
 800038a:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <led7_segRun+0x14>)
 800038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000390:	080003a5 	.word	0x080003a5
 8000394:	080003b9 	.word	0x080003b9
 8000398:	08000407 	.word	0x08000407
 800039c:	08000455 	.word	0x08000455
 80003a0:	080004a3 	.word	0x080004a3
    case LED_INIT:
        update_led7seg();
 80003a4:	f7ff ff8a 	bl	80002bc <update_led7seg>
        led_status = LED0;
 80003a8:	4b57      	ldr	r3, [pc, #348]	; (8000508 <led7_segRun+0x18c>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	601a      	str	r2, [r3, #0]
        setTimer(1, 250);
 80003ae:	21fa      	movs	r1, #250	; 0xfa
 80003b0:	2001      	movs	r0, #1
 80003b2:	f000 fdc1 	bl	8000f38 <setTimer>
        break;
 80003b6:	e0a4      	b.n	8000502 <led7_segRun+0x186>
    case LED0:
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	4853      	ldr	r0, [pc, #332]	; (800050c <led7_segRun+0x190>)
 80003be:	f001 fa44 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2180      	movs	r1, #128	; 0x80
 80003c6:	4851      	ldr	r0, [pc, #324]	; (800050c <led7_segRun+0x190>)
 80003c8:	f001 fa3f 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d2:	484e      	ldr	r0, [pc, #312]	; (800050c <led7_segRun+0x190>)
 80003d4:	f001 fa39 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003de:	484b      	ldr	r0, [pc, #300]	; (800050c <led7_segRun+0x190>)
 80003e0:	f001 fa33 	bl	800184a <HAL_GPIO_WritePin>
        numToLed(led_buffer[0]);
 80003e4:	4b4a      	ldr	r3, [pc, #296]	; (8000510 <led7_segRun+0x194>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 faa3 	bl	8000934 <numToLed>
        if (timer_flag[1] == 1){
 80003ee:	4b49      	ldr	r3, [pc, #292]	; (8000514 <led7_segRun+0x198>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d17e      	bne.n	80004f4 <led7_segRun+0x178>
            led_status = LED1;
 80003f6:	4b44      	ldr	r3, [pc, #272]	; (8000508 <led7_segRun+0x18c>)
 80003f8:	2202      	movs	r2, #2
 80003fa:	601a      	str	r2, [r3, #0]
            setTimer(1, 250);
 80003fc:	21fa      	movs	r1, #250	; 0xfa
 80003fe:	2001      	movs	r0, #1
 8000400:	f000 fd9a 	bl	8000f38 <setTimer>
        }
        break;
 8000404:	e076      	b.n	80004f4 <led7_segRun+0x178>
    case LED1:
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	4840      	ldr	r0, [pc, #256]	; (800050c <led7_segRun+0x190>)
 800040c:	f001 fa1d 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	483d      	ldr	r0, [pc, #244]	; (800050c <led7_segRun+0x190>)
 8000416:	f001 fa18 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000420:	483a      	ldr	r0, [pc, #232]	; (800050c <led7_segRun+0x190>)
 8000422:	f001 fa12 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 7100 	mov.w	r1, #512	; 0x200
 800042c:	4837      	ldr	r0, [pc, #220]	; (800050c <led7_segRun+0x190>)
 800042e:	f001 fa0c 	bl	800184a <HAL_GPIO_WritePin>
        numToLed(led_buffer[1]);
 8000432:	4b37      	ldr	r3, [pc, #220]	; (8000510 <led7_segRun+0x194>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fa7c 	bl	8000934 <numToLed>
        if (timer_flag[1] == 1){
 800043c:	4b35      	ldr	r3, [pc, #212]	; (8000514 <led7_segRun+0x198>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d159      	bne.n	80004f8 <led7_segRun+0x17c>
            led_status = LED2;
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <led7_segRun+0x18c>)
 8000446:	2203      	movs	r2, #3
 8000448:	601a      	str	r2, [r3, #0]
            setTimer(1, 250);
 800044a:	21fa      	movs	r1, #250	; 0xfa
 800044c:	2001      	movs	r0, #1
 800044e:	f000 fd73 	bl	8000f38 <setTimer>
        }
        break;
 8000452:	e051      	b.n	80004f8 <led7_segRun+0x17c>
    case LED2:
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	; 0x40
 8000458:	482c      	ldr	r0, [pc, #176]	; (800050c <led7_segRun+0x190>)
 800045a:	f001 f9f6 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	482a      	ldr	r0, [pc, #168]	; (800050c <led7_segRun+0x190>)
 8000464:	f001 f9f1 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046e:	4827      	ldr	r0, [pc, #156]	; (800050c <led7_segRun+0x190>)
 8000470:	f001 f9eb 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800047a:	4824      	ldr	r0, [pc, #144]	; (800050c <led7_segRun+0x190>)
 800047c:	f001 f9e5 	bl	800184a <HAL_GPIO_WritePin>
        numToLed(led_buffer[2]);
 8000480:	4b23      	ldr	r3, [pc, #140]	; (8000510 <led7_segRun+0x194>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fa55 	bl	8000934 <numToLed>
        if (timer_flag[1] == 1){
 800048a:	4b22      	ldr	r3, [pc, #136]	; (8000514 <led7_segRun+0x198>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d134      	bne.n	80004fc <led7_segRun+0x180>
            led_status = LED3;
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <led7_segRun+0x18c>)
 8000494:	2204      	movs	r2, #4
 8000496:	601a      	str	r2, [r3, #0]
            setTimer(1, 250);
 8000498:	21fa      	movs	r1, #250	; 0xfa
 800049a:	2001      	movs	r0, #1
 800049c:	f000 fd4c 	bl	8000f38 <setTimer>
        }
        break;
 80004a0:	e02c      	b.n	80004fc <led7_segRun+0x180>
    case LED3:
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	2140      	movs	r1, #64	; 0x40
 80004a6:	4819      	ldr	r0, [pc, #100]	; (800050c <led7_segRun+0x190>)
 80004a8:	f001 f9cf 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	4816      	ldr	r0, [pc, #88]	; (800050c <led7_segRun+0x190>)
 80004b2:	f001 f9ca 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004bc:	4813      	ldr	r0, [pc, #76]	; (800050c <led7_segRun+0x190>)
 80004be:	f001 f9c4 	bl	800184a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c8:	4810      	ldr	r0, [pc, #64]	; (800050c <led7_segRun+0x190>)
 80004ca:	f001 f9be 	bl	800184a <HAL_GPIO_WritePin>
        numToLed(led_buffer[3]);
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <led7_segRun+0x194>)
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fa2e 	bl	8000934 <numToLed>
        if (timer_flag[1] == 1){
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <led7_segRun+0x198>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d10f      	bne.n	8000500 <led7_segRun+0x184>
            led_status = LED0;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <led7_segRun+0x18c>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
            setTimer(1, 250);
 80004e6:	21fa      	movs	r1, #250	; 0xfa
 80004e8:	2001      	movs	r0, #1
 80004ea:	f000 fd25 	bl	8000f38 <setTimer>
        }
        break;
 80004ee:	e007      	b.n	8000500 <led7_segRun+0x184>
    default:
        break;
 80004f0:	bf00      	nop
 80004f2:	e006      	b.n	8000502 <led7_segRun+0x186>
        break;
 80004f4:	bf00      	nop
 80004f6:	e004      	b.n	8000502 <led7_segRun+0x186>
        break;
 80004f8:	bf00      	nop
 80004fa:	e002      	b.n	8000502 <led7_segRun+0x186>
        break;
 80004fc:	bf00      	nop
 80004fe:	e000      	b.n	8000502 <led7_segRun+0x186>
        break;
 8000500:	bf00      	nop
    }
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000068 	.word	0x20000068
 800050c:	40010800 	.word	0x40010800
 8000510:	20000090 	.word	0x20000090
 8000514:	200000f4 	.word	0x200000f4

08000518 <traffic_lightRun>:

void traffic_lightRun(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    switch (status){
 800051c:	4b43      	ldr	r3, [pc, #268]	; (800062c <traffic_lightRun+0x114>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b04      	cmp	r3, #4
 8000522:	d878      	bhi.n	8000616 <traffic_lightRun+0xfe>
 8000524:	a201      	add	r2, pc, #4	; (adr r2, 800052c <traffic_lightRun+0x14>)
 8000526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052a:	bf00      	nop
 800052c:	08000541 	.word	0x08000541
 8000530:	08000567 	.word	0x08000567
 8000534:	08000593 	.word	0x08000593
 8000538:	080005bf 	.word	0x080005bf
 800053c:	080005eb 	.word	0x080005eb
    case INIT:
        led1_value = green_duration;
 8000540:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <traffic_lightRun+0x118>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a3b      	ldr	r2, [pc, #236]	; (8000634 <traffic_lightRun+0x11c>)
 8000546:	6013      	str	r3, [r2, #0]
        led2_value = red_duration;
 8000548:	4b3b      	ldr	r3, [pc, #236]	; (8000638 <traffic_lightRun+0x120>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a3b      	ldr	r2, [pc, #236]	; (800063c <traffic_lightRun+0x124>)
 800054e:	6013      	str	r3, [r2, #0]
        update_led7seg();
 8000550:	f7ff feb4 	bl	80002bc <update_led7seg>
        setTimer(2, 1000);
 8000554:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000558:	2002      	movs	r0, #2
 800055a:	f000 fced 	bl	8000f38 <setTimer>
        status = STATUS1;
 800055e:	4b33      	ldr	r3, [pc, #204]	; (800062c <traffic_lightRun+0x114>)
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
        break;
 8000564:	e060      	b.n	8000628 <traffic_lightRun+0x110>
    case STATUS1:
        GREEN_1();
 8000566:	f000 fddb 	bl	8001120 <GREEN_1>
        RED_2();
 800056a:	f000 fe05 	bl	8001178 <RED_2>
        if (led1_value == 0){
 800056e:	4b31      	ldr	r3, [pc, #196]	; (8000634 <traffic_lightRun+0x11c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d151      	bne.n	800061a <traffic_lightRun+0x102>
            led1_value = yellow_duration;
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <traffic_lightRun+0x128>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a2e      	ldr	r2, [pc, #184]	; (8000634 <traffic_lightRun+0x11c>)
 800057c:	6013      	str	r3, [r2, #0]
            led2_value = yellow_duration;
 800057e:	4b30      	ldr	r3, [pc, #192]	; (8000640 <traffic_lightRun+0x128>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a2e      	ldr	r2, [pc, #184]	; (800063c <traffic_lightRun+0x124>)
 8000584:	6013      	str	r3, [r2, #0]
            update_led7seg();
 8000586:	f7ff fe99 	bl	80002bc <update_led7seg>
            status = STATUS2;
 800058a:	4b28      	ldr	r3, [pc, #160]	; (800062c <traffic_lightRun+0x114>)
 800058c:	2202      	movs	r2, #2
 800058e:	601a      	str	r2, [r3, #0]
        }
        break;
 8000590:	e043      	b.n	800061a <traffic_lightRun+0x102>
    case STATUS2:
        YELLOW_1();
 8000592:	f000 fddb 	bl	800114c <YELLOW_1>
        RED_2();
 8000596:	f000 fdef 	bl	8001178 <RED_2>
        if (led1_value == 0){
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <traffic_lightRun+0x11c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d13d      	bne.n	800061e <traffic_lightRun+0x106>
            led1_value = red_duration;
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <traffic_lightRun+0x120>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a23      	ldr	r2, [pc, #140]	; (8000634 <traffic_lightRun+0x11c>)
 80005a8:	6013      	str	r3, [r2, #0]
            led2_value = green_duration;
 80005aa:	4b21      	ldr	r3, [pc, #132]	; (8000630 <traffic_lightRun+0x118>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a23      	ldr	r2, [pc, #140]	; (800063c <traffic_lightRun+0x124>)
 80005b0:	6013      	str	r3, [r2, #0]
            update_led7seg();
 80005b2:	f7ff fe83 	bl	80002bc <update_led7seg>
            status = STATUS3;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <traffic_lightRun+0x114>)
 80005b8:	2203      	movs	r2, #3
 80005ba:	601a      	str	r2, [r3, #0]
        }
        break;
 80005bc:	e02f      	b.n	800061e <traffic_lightRun+0x106>
    case STATUS3:
        RED_1();
 80005be:	f000 fd99 	bl	80010f4 <RED_1>
        GREEN_2();
 80005c2:	f000 fdef 	bl	80011a4 <GREEN_2>
        if (led2_value == 0){
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <traffic_lightRun+0x124>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d129      	bne.n	8000622 <traffic_lightRun+0x10a>
            led1_value = yellow_duration;
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <traffic_lightRun+0x128>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a18      	ldr	r2, [pc, #96]	; (8000634 <traffic_lightRun+0x11c>)
 80005d4:	6013      	str	r3, [r2, #0]
            led2_value = yellow_duration;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <traffic_lightRun+0x128>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <traffic_lightRun+0x124>)
 80005dc:	6013      	str	r3, [r2, #0]
            update_led7seg();
 80005de:	f7ff fe6d 	bl	80002bc <update_led7seg>
            status = STATUS4;
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <traffic_lightRun+0x114>)
 80005e4:	2204      	movs	r2, #4
 80005e6:	601a      	str	r2, [r3, #0]
        }
        break;
 80005e8:	e01b      	b.n	8000622 <traffic_lightRun+0x10a>
    case STATUS4:
        YELLOW_2();
 80005ea:	f000 fdf1 	bl	80011d0 <YELLOW_2>
        RED_1();
 80005ee:	f000 fd81 	bl	80010f4 <RED_1>
        if (led2_value == 0){
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <traffic_lightRun+0x124>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d115      	bne.n	8000626 <traffic_lightRun+0x10e>
            led1_value = green_duration;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <traffic_lightRun+0x118>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <traffic_lightRun+0x11c>)
 8000600:	6013      	str	r3, [r2, #0]
            led2_value = red_duration;
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <traffic_lightRun+0x120>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0d      	ldr	r2, [pc, #52]	; (800063c <traffic_lightRun+0x124>)
 8000608:	6013      	str	r3, [r2, #0]
            update_led7seg();
 800060a:	f7ff fe57 	bl	80002bc <update_led7seg>
            status = STATUS1;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <traffic_lightRun+0x114>)
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
        }
        break;
 8000614:	e007      	b.n	8000626 <traffic_lightRun+0x10e>
    default:
        break;
 8000616:	bf00      	nop
 8000618:	e006      	b.n	8000628 <traffic_lightRun+0x110>
        break;
 800061a:	bf00      	nop
 800061c:	e004      	b.n	8000628 <traffic_lightRun+0x110>
        break;
 800061e:	bf00      	nop
 8000620:	e002      	b.n	8000628 <traffic_lightRun+0x110>
        break;
 8000622:	bf00      	nop
 8000624:	e000      	b.n	8000628 <traffic_lightRun+0x110>
        break;
 8000626:	bf00      	nop
    }
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000006c 	.word	0x2000006c
 8000630:	20000038 	.word	0x20000038
 8000634:	20000070 	.word	0x20000070
 8000638:	20000034 	.word	0x20000034
 800063c:	20000074 	.word	0x20000074
 8000640:	2000003c 	.word	0x2000003c

08000644 <fsm_automatic>:

void fsm_automatic(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
    traffic_lightRun();
 8000648:	f7ff ff66 	bl	8000518 <traffic_lightRun>
    led7_segRun();
 800064c:	f7ff fe96 	bl	800037c <led7_segRun>
    update_led_for_1s();
 8000650:	f7ff fe74 	bl	800033c <update_led_for_1s>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <increase_duration>:
 *  Created on: Dec 16, 2024
 *      Author: LENOVO
 */
#include "fsm_manual.h"

void increase_duration() {
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
    led1_value = (led1_value + 1) % 100;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <increase_duration+0x2c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <increase_duration+0x30>)
 8000664:	fb83 1302 	smull	r1, r3, r3, r2
 8000668:	1159      	asrs	r1, r3, #5
 800066a:	17d3      	asrs	r3, r2, #31
 800066c:	1acb      	subs	r3, r1, r3
 800066e:	2164      	movs	r1, #100	; 0x64
 8000670:	fb01 f303 	mul.w	r3, r1, r3
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	4a03      	ldr	r2, [pc, #12]	; (8000684 <increase_duration+0x2c>)
 8000678:	6013      	str	r3, [r2, #0]
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000070 	.word	0x20000070
 8000688:	51eb851f 	.word	0x51eb851f

0800068c <check_and_update_durations>:

void check_and_update_durations() {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
    if (((red_duration == -1) && (green_duration == -1)) ||
 8000690:	4b32      	ldr	r3, [pc, #200]	; (800075c <check_and_update_durations+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000698:	d104      	bne.n	80006a4 <check_and_update_durations+0x18>
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <check_and_update_durations+0xd4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a2:	d013      	beq.n	80006cc <check_and_update_durations+0x40>
        ((green_duration == -1) && (yellow_duration == -1)) ||
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <check_and_update_durations+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
    if (((red_duration == -1) && (green_duration == -1)) ||
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ac:	d104      	bne.n	80006b8 <check_and_update_durations+0x2c>
        ((green_duration == -1) && (yellow_duration == -1)) ||
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <check_and_update_durations+0xd8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b6:	d009      	beq.n	80006cc <check_and_update_durations+0x40>
        ((yellow_duration == -1) && (red_duration == -1))) {
 80006b8:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <check_and_update_durations+0xd8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
        ((green_duration == -1) && (yellow_duration == -1)) ||
 80006bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c0:	d10e      	bne.n	80006e0 <check_and_update_durations+0x54>
        ((yellow_duration == -1) && (red_duration == -1))) {
 80006c2:	4b26      	ldr	r3, [pc, #152]	; (800075c <check_and_update_durations+0xd0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ca:	d109      	bne.n	80006e0 <check_and_update_durations+0x54>
        red_duration = DEFAULT_RED;
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <check_and_update_durations+0xd0>)
 80006ce:	2205      	movs	r2, #5
 80006d0:	601a      	str	r2, [r3, #0]
        green_duration = DEFAULT_GREEN;
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <check_and_update_durations+0xd4>)
 80006d4:	2203      	movs	r2, #3
 80006d6:	601a      	str	r2, [r3, #0]
        yellow_duration = DEFAULT_YELLOW;
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <check_and_update_durations+0xd8>)
 80006da:	2202      	movs	r2, #2
 80006dc:	601a      	str	r2, [r3, #0]
    else if (red_duration != green_duration + yellow_duration) {
        red_duration = DEFAULT_RED;
        green_duration = DEFAULT_GREEN;
        yellow_duration = DEFAULT_YELLOW;
    }
}
 80006de:	e038      	b.n	8000752 <check_and_update_durations+0xc6>
    else if (red_duration == -1) {
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <check_and_update_durations+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e8:	d107      	bne.n	80006fa <check_and_update_durations+0x6e>
        red_duration = green_duration + yellow_duration;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <check_and_update_durations+0xd4>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <check_and_update_durations+0xd8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a19      	ldr	r2, [pc, #100]	; (800075c <check_and_update_durations+0xd0>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	e02b      	b.n	8000752 <check_and_update_durations+0xc6>
    else if (green_duration == -1) {
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <check_and_update_durations+0xd4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000702:	d107      	bne.n	8000714 <check_and_update_durations+0x88>
        green_duration = red_duration - yellow_duration;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <check_and_update_durations+0xd0>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <check_and_update_durations+0xd8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	4a14      	ldr	r2, [pc, #80]	; (8000760 <check_and_update_durations+0xd4>)
 8000710:	6013      	str	r3, [r2, #0]
}
 8000712:	e01e      	b.n	8000752 <check_and_update_durations+0xc6>
    else if (yellow_duration == -1) {
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <check_and_update_durations+0xd8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800071c:	d107      	bne.n	800072e <check_and_update_durations+0xa2>
        yellow_duration = red_duration - green_duration;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <check_and_update_durations+0xd0>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <check_and_update_durations+0xd4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <check_and_update_durations+0xd8>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	e011      	b.n	8000752 <check_and_update_durations+0xc6>
    else if (red_duration != green_duration + yellow_duration) {
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <check_and_update_durations+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <check_and_update_durations+0xd8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	441a      	add	r2, r3
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <check_and_update_durations+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d008      	beq.n	8000752 <check_and_update_durations+0xc6>
        red_duration = DEFAULT_RED;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <check_and_update_durations+0xd0>)
 8000742:	2205      	movs	r2, #5
 8000744:	601a      	str	r2, [r3, #0]
        green_duration = DEFAULT_GREEN;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <check_and_update_durations+0xd4>)
 8000748:	2203      	movs	r2, #3
 800074a:	601a      	str	r2, [r3, #0]
        yellow_duration = DEFAULT_YELLOW;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <check_and_update_durations+0xd8>)
 800074e:	2202      	movs	r2, #2
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000034 	.word	0x20000034
 8000760:	20000038 	.word	0x20000038
 8000764:	2000003c 	.word	0x2000003c

08000768 <fsm_manual>:

void fsm_manual() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    switch (mode) {
 800076c:	4b69      	ldr	r3, [pc, #420]	; (8000914 <fsm_manual+0x1ac>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d007      	beq.n	8000784 <fsm_manual+0x1c>
 8000774:	2b00      	cmp	r3, #0
 8000776:	f340 80c8 	ble.w	800090a <fsm_manual+0x1a2>
 800077a:	3b02      	subs	r3, #2
 800077c:	2b02      	cmp	r3, #2
 800077e:	f200 80c4 	bhi.w	800090a <fsm_manual+0x1a2>
 8000782:	e017      	b.n	80007b4 <fsm_manual+0x4c>
        case MODE1:
            fsm_automatic();
 8000784:	f7ff ff5e 	bl	8000644 <fsm_automatic>

            if (is_button_pressed(0)) {
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff fcdf 	bl	800014c <is_button_pressed>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	f000 80bc 	beq.w	800090e <fsm_manual+0x1a6>
                led1_value = 0;
 8000796:	4b60      	ldr	r3, [pc, #384]	; (8000918 <fsm_manual+0x1b0>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
                led2_value = 1;
 800079c:	4b5f      	ldr	r3, [pc, #380]	; (800091c <fsm_manual+0x1b4>)
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
                update_led7seg();
 80007a2:	f7ff fd8b 	bl	80002bc <update_led7seg>
                led_status = INIT;
 80007a6:	4b5e      	ldr	r3, [pc, #376]	; (8000920 <fsm_manual+0x1b8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
                mode = MODE2;
 80007ac:	4b59      	ldr	r3, [pc, #356]	; (8000914 <fsm_manual+0x1ac>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	601a      	str	r2, [r3, #0]
            }
            break;
 80007b2:	e0ac      	b.n	800090e <fsm_manual+0x1a6>

        case MODE2:
        case MODE3:
        case MODE4:
            if (mode == MODE2) {
 80007b4:	4b57      	ldr	r3, [pc, #348]	; (8000914 <fsm_manual+0x1ac>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d104      	bne.n	80007c6 <fsm_manual+0x5e>
                RED_1();
 80007bc:	f000 fc9a 	bl	80010f4 <RED_1>
                RED_2();
 80007c0:	f000 fcda 	bl	8001178 <RED_2>
 80007c4:	e010      	b.n	80007e8 <fsm_manual+0x80>
            } else if (mode == MODE3) {
 80007c6:	4b53      	ldr	r3, [pc, #332]	; (8000914 <fsm_manual+0x1ac>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d104      	bne.n	80007d8 <fsm_manual+0x70>
                YELLOW_1();
 80007ce:	f000 fcbd 	bl	800114c <YELLOW_1>
                YELLOW_2();
 80007d2:	f000 fcfd 	bl	80011d0 <YELLOW_2>
 80007d6:	e007      	b.n	80007e8 <fsm_manual+0x80>
            } else if (mode == MODE4) {
 80007d8:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <fsm_manual+0x1ac>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d103      	bne.n	80007e8 <fsm_manual+0x80>
                GREEN_1();
 80007e0:	f000 fc9e 	bl	8001120 <GREEN_1>
                GREEN_2();
 80007e4:	f000 fcde 	bl	80011a4 <GREEN_2>
            }

            if (is_button_pressed(1)) {
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff fcaf 	bl	800014c <is_button_pressed>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d003      	beq.n	80007fc <fsm_manual+0x94>
                increase_duration();
 80007f4:	f7ff ff30 	bl	8000658 <increase_duration>
                update_led7seg();
 80007f8:	f7ff fd60 	bl	80002bc <update_led7seg>
            }

            if (is_button_pressed(0)) {
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fca5 	bl	800014c <is_button_pressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d03b      	beq.n	8000880 <fsm_manual+0x118>
                if (mode == MODE2) red_duration = -1;
 8000808:	4b42      	ldr	r3, [pc, #264]	; (8000914 <fsm_manual+0x1ac>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d104      	bne.n	800081a <fsm_manual+0xb2>
 8000810:	4b44      	ldr	r3, [pc, #272]	; (8000924 <fsm_manual+0x1bc>)
 8000812:	f04f 32ff 	mov.w	r2, #4294967295
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	e010      	b.n	800083c <fsm_manual+0xd4>
                else if (mode == MODE3) yellow_duration = -1;
 800081a:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <fsm_manual+0x1ac>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d104      	bne.n	800082c <fsm_manual+0xc4>
 8000822:	4b41      	ldr	r3, [pc, #260]	; (8000928 <fsm_manual+0x1c0>)
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	e007      	b.n	800083c <fsm_manual+0xd4>
                else if (mode == MODE4) green_duration = -1;
 800082c:	4b39      	ldr	r3, [pc, #228]	; (8000914 <fsm_manual+0x1ac>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b04      	cmp	r3, #4
 8000832:	d103      	bne.n	800083c <fsm_manual+0xd4>
 8000834:	4b3d      	ldr	r3, [pc, #244]	; (800092c <fsm_manual+0x1c4>)
 8000836:	f04f 32ff 	mov.w	r2, #4294967295
 800083a:	601a      	str	r2, [r3, #0]

                if (mode == MODE4) {
 800083c:	4b35      	ldr	r3, [pc, #212]	; (8000914 <fsm_manual+0x1ac>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b04      	cmp	r3, #4
 8000842:	d10b      	bne.n	800085c <fsm_manual+0xf4>
                    check_and_update_durations();
 8000844:	f7ff ff22 	bl	800068c <check_and_update_durations>
                    mode = MODE1;
 8000848:	4b32      	ldr	r3, [pc, #200]	; (8000914 <fsm_manual+0x1ac>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
                    led_status = INIT;
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <fsm_manual+0x1b8>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
                    status = INIT;
 8000854:	4b36      	ldr	r3, [pc, #216]	; (8000930 <fsm_manual+0x1c8>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	e011      	b.n	8000880 <fsm_manual+0x118>
                } else {
                    led1_value = 0;
 800085c:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <fsm_manual+0x1b0>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
                    led2_value = mode + 1;
 8000862:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <fsm_manual+0x1ac>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	4a2c      	ldr	r2, [pc, #176]	; (800091c <fsm_manual+0x1b4>)
 800086a:	6013      	str	r3, [r2, #0]
                    update_led7seg();
 800086c:	f7ff fd26 	bl	80002bc <update_led7seg>
                    led_status = INIT;
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <fsm_manual+0x1b8>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
                    mode++;
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <fsm_manual+0x1ac>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <fsm_manual+0x1ac>)
 800087e:	6013      	str	r3, [r2, #0]
                }
            }

            if (is_button_pressed(2)) {
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fc63 	bl	800014c <is_button_pressed>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d03b      	beq.n	8000904 <fsm_manual+0x19c>
                if (mode == MODE2) red_duration = led1_value;
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <fsm_manual+0x1ac>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b02      	cmp	r3, #2
 8000892:	d104      	bne.n	800089e <fsm_manual+0x136>
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <fsm_manual+0x1b0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a22      	ldr	r2, [pc, #136]	; (8000924 <fsm_manual+0x1bc>)
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	e010      	b.n	80008c0 <fsm_manual+0x158>
                else if (mode == MODE3) yellow_duration = led1_value;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <fsm_manual+0x1ac>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d104      	bne.n	80008b0 <fsm_manual+0x148>
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <fsm_manual+0x1b0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a1f      	ldr	r2, [pc, #124]	; (8000928 <fsm_manual+0x1c0>)
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e007      	b.n	80008c0 <fsm_manual+0x158>
                else if (mode == MODE4) green_duration = led1_value;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <fsm_manual+0x1ac>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d103      	bne.n	80008c0 <fsm_manual+0x158>
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <fsm_manual+0x1b0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a1b      	ldr	r2, [pc, #108]	; (800092c <fsm_manual+0x1c4>)
 80008be:	6013      	str	r3, [r2, #0]

                if (mode == MODE4) {
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <fsm_manual+0x1ac>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d10b      	bne.n	80008e0 <fsm_manual+0x178>
                    check_and_update_durations();
 80008c8:	f7ff fee0 	bl	800068c <check_and_update_durations>
                    mode = MODE1;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <fsm_manual+0x1ac>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
                    led_status = INIT;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <fsm_manual+0x1b8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
                    status = INIT;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <fsm_manual+0x1c8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	e011      	b.n	8000904 <fsm_manual+0x19c>
                } else {
                    led1_value = 0;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <fsm_manual+0x1b0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
                    led2_value = mode + 1;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <fsm_manual+0x1ac>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3301      	adds	r3, #1
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <fsm_manual+0x1b4>)
 80008ee:	6013      	str	r3, [r2, #0]
                    update_led7seg();
 80008f0:	f7ff fce4 	bl	80002bc <update_led7seg>
                    led_status = INIT;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <fsm_manual+0x1b8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
                    mode++;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <fsm_manual+0x1ac>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <fsm_manual+0x1ac>)
 8000902:	6013      	str	r3, [r2, #0]
                }
            }

            led7_segRun();
 8000904:	f7ff fd3a 	bl	800037c <led7_segRun>
            break;
 8000908:	e002      	b.n	8000910 <fsm_manual+0x1a8>

        default:
            break;
 800090a:	bf00      	nop
 800090c:	e000      	b.n	8000910 <fsm_manual+0x1a8>
            break;
 800090e:	bf00      	nop
    }
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000030 	.word	0x20000030
 8000918:	20000070 	.word	0x20000070
 800091c:	20000074 	.word	0x20000074
 8000920:	20000068 	.word	0x20000068
 8000924:	20000034 	.word	0x20000034
 8000928:	2000003c 	.word	0x2000003c
 800092c:	20000038 	.word	0x20000038
 8000930:	2000006c 	.word	0x2000006c

08000934 <numToLed>:
 *  Created on: Dec 16, 2024
 *      Author: LENOVO
 */
#include "led7_segment.h"

void numToLed(int num){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b09      	cmp	r3, #9
 8000940:	d834      	bhi.n	80009ac <numToLed+0x78>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <numToLed+0x14>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000971 	.word	0x08000971
 800094c:	08000977 	.word	0x08000977
 8000950:	0800097d 	.word	0x0800097d
 8000954:	08000983 	.word	0x08000983
 8000958:	08000989 	.word	0x08000989
 800095c:	0800098f 	.word	0x0800098f
 8000960:	08000995 	.word	0x08000995
 8000964:	0800099b 	.word	0x0800099b
 8000968:	080009a1 	.word	0x080009a1
 800096c:	080009a7 	.word	0x080009a7
	switch(num){
	case 0:
		ZERO();
 8000970:	f000 f822 	bl	80009b8 <ZERO>
		break;
 8000974:	e01b      	b.n	80009ae <numToLed+0x7a>
	case 1:
		ONE();
 8000976:	f000 f849 	bl	8000a0c <ONE>
		break;
 800097a:	e018      	b.n	80009ae <numToLed+0x7a>
	case 2:
		TWO();
 800097c:	f000 f870 	bl	8000a60 <TWO>
		break;
 8000980:	e015      	b.n	80009ae <numToLed+0x7a>
	case 3:
		THREE();
 8000982:	f000 f897 	bl	8000ab4 <THREE>
		break;
 8000986:	e012      	b.n	80009ae <numToLed+0x7a>
	case 4:
		FOUR();
 8000988:	f000 f8be 	bl	8000b08 <FOUR>
		break;
 800098c:	e00f      	b.n	80009ae <numToLed+0x7a>
	case 5:
		FIVE();
 800098e:	f000 f8e5 	bl	8000b5c <FIVE>
		break;
 8000992:	e00c      	b.n	80009ae <numToLed+0x7a>
	case 6:
		SIX();
 8000994:	f000 f90c 	bl	8000bb0 <SIX>
		break;
 8000998:	e009      	b.n	80009ae <numToLed+0x7a>
	case 7:
		SEVEN();
 800099a:	f000 f933 	bl	8000c04 <SEVEN>
		break;
 800099e:	e006      	b.n	80009ae <numToLed+0x7a>
	case 8:
		EIGHT();
 80009a0:	f000 f95a 	bl	8000c58 <EIGHT>
		break;
 80009a4:	e003      	b.n	80009ae <numToLed+0x7a>
	case 9:
		NINE();
 80009a6:	f000 f981 	bl	8000cac <NINE>
		break;
 80009aa:	e000      	b.n	80009ae <numToLed+0x7a>
	default:
		break;
 80009ac:	bf00      	nop
	}
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop

080009b8 <ZERO>:
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
}
void ZERO(){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2101      	movs	r1, #1
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <ZERO+0x50>)
 80009c2:	f000 ff42 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2102      	movs	r1, #2
 80009ca:	480f      	ldr	r0, [pc, #60]	; (8000a08 <ZERO+0x50>)
 80009cc:	f000 ff3d 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2104      	movs	r1, #4
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <ZERO+0x50>)
 80009d6:	f000 ff38 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2108      	movs	r1, #8
 80009de:	480a      	ldr	r0, [pc, #40]	; (8000a08 <ZERO+0x50>)
 80009e0:	f000 ff33 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2110      	movs	r1, #16
 80009e8:	4807      	ldr	r0, [pc, #28]	; (8000a08 <ZERO+0x50>)
 80009ea:	f000 ff2e 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2120      	movs	r1, #32
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <ZERO+0x50>)
 80009f4:	f000 ff29 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <ZERO+0x50>)
 80009fe:	f000 ff24 	bl	800184a <HAL_GPIO_WritePin>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010c00 	.word	0x40010c00

08000a0c <ONE>:
void ONE(){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2101      	movs	r1, #1
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <ONE+0x50>)
 8000a16:	f000 ff18 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	480f      	ldr	r0, [pc, #60]	; (8000a5c <ONE+0x50>)
 8000a20:	f000 ff13 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2104      	movs	r1, #4
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <ONE+0x50>)
 8000a2a:	f000 ff0e 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2108      	movs	r1, #8
 8000a32:	480a      	ldr	r0, [pc, #40]	; (8000a5c <ONE+0x50>)
 8000a34:	f000 ff09 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <ONE+0x50>)
 8000a3e:	f000 ff04 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2120      	movs	r1, #32
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <ONE+0x50>)
 8000a48:	f000 feff 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <ONE+0x50>)
 8000a52:	f000 fefa 	bl	800184a <HAL_GPIO_WritePin>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <TWO>:
void TWO(){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2101      	movs	r1, #1
 8000a68:	4811      	ldr	r0, [pc, #68]	; (8000ab0 <TWO+0x50>)
 8000a6a:	f000 feee 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2102      	movs	r1, #2
 8000a72:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <TWO+0x50>)
 8000a74:	f000 fee9 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <TWO+0x50>)
 8000a7e:	f000 fee4 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2108      	movs	r1, #8
 8000a86:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <TWO+0x50>)
 8000a88:	f000 fedf 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2110      	movs	r1, #16
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <TWO+0x50>)
 8000a92:	f000 feda 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2120      	movs	r1, #32
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <TWO+0x50>)
 8000a9c:	f000 fed5 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <TWO+0x50>)
 8000aa6:	f000 fed0 	bl	800184a <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <THREE>:
void THREE(){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2101      	movs	r1, #1
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <THREE+0x50>)
 8000abe:	f000 fec4 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	480f      	ldr	r0, [pc, #60]	; (8000b04 <THREE+0x50>)
 8000ac8:	f000 febf 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2104      	movs	r1, #4
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <THREE+0x50>)
 8000ad2:	f000 feba 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2108      	movs	r1, #8
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <THREE+0x50>)
 8000adc:	f000 feb5 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <THREE+0x50>)
 8000ae6:	f000 feb0 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2120      	movs	r1, #32
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <THREE+0x50>)
 8000af0:	f000 feab 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <THREE+0x50>)
 8000afa:	f000 fea6 	bl	800184a <HAL_GPIO_WritePin>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40010c00 	.word	0x40010c00

08000b08 <FOUR>:
void FOUR(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <FOUR+0x50>)
 8000b12:	f000 fe9a 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2102      	movs	r1, #2
 8000b1a:	480f      	ldr	r0, [pc, #60]	; (8000b58 <FOUR+0x50>)
 8000b1c:	f000 fe95 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2104      	movs	r1, #4
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <FOUR+0x50>)
 8000b26:	f000 fe90 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2108      	movs	r1, #8
 8000b2e:	480a      	ldr	r0, [pc, #40]	; (8000b58 <FOUR+0x50>)
 8000b30:	f000 fe8b 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2110      	movs	r1, #16
 8000b38:	4807      	ldr	r0, [pc, #28]	; (8000b58 <FOUR+0x50>)
 8000b3a:	f000 fe86 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2120      	movs	r1, #32
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <FOUR+0x50>)
 8000b44:	f000 fe81 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <FOUR+0x50>)
 8000b4e:	f000 fe7c 	bl	800184a <HAL_GPIO_WritePin>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40010c00 	.word	0x40010c00

08000b5c <FIVE>:
void FIVE(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2101      	movs	r1, #1
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <FIVE+0x50>)
 8000b66:	f000 fe70 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <FIVE+0x50>)
 8000b70:	f000 fe6b 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2104      	movs	r1, #4
 8000b78:	480c      	ldr	r0, [pc, #48]	; (8000bac <FIVE+0x50>)
 8000b7a:	f000 fe66 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2108      	movs	r1, #8
 8000b82:	480a      	ldr	r0, [pc, #40]	; (8000bac <FIVE+0x50>)
 8000b84:	f000 fe61 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <FIVE+0x50>)
 8000b8e:	f000 fe5c 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2120      	movs	r1, #32
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <FIVE+0x50>)
 8000b98:	f000 fe57 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2140      	movs	r1, #64	; 0x40
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <FIVE+0x50>)
 8000ba2:	f000 fe52 	bl	800184a <HAL_GPIO_WritePin>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <SIX>:
void SIX(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <SIX+0x50>)
 8000bba:	f000 fe46 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <SIX+0x50>)
 8000bc4:	f000 fe41 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2104      	movs	r1, #4
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <SIX+0x50>)
 8000bce:	f000 fe3c 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	480a      	ldr	r0, [pc, #40]	; (8000c00 <SIX+0x50>)
 8000bd8:	f000 fe37 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <SIX+0x50>)
 8000be2:	f000 fe32 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <SIX+0x50>)
 8000bec:	f000 fe2d 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <SIX+0x50>)
 8000bf6:	f000 fe28 	bl	800184a <HAL_GPIO_WritePin>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40010c00 	.word	0x40010c00

08000c04 <SEVEN>:
void SEVEN(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4811      	ldr	r0, [pc, #68]	; (8000c54 <SEVEN+0x50>)
 8000c0e:	f000 fe1c 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2102      	movs	r1, #2
 8000c16:	480f      	ldr	r0, [pc, #60]	; (8000c54 <SEVEN+0x50>)
 8000c18:	f000 fe17 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2104      	movs	r1, #4
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <SEVEN+0x50>)
 8000c22:	f000 fe12 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2108      	movs	r1, #8
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <SEVEN+0x50>)
 8000c2c:	f000 fe0d 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2110      	movs	r1, #16
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <SEVEN+0x50>)
 8000c36:	f000 fe08 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <SEVEN+0x50>)
 8000c40:	f000 fe03 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2140      	movs	r1, #64	; 0x40
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <SEVEN+0x50>)
 8000c4a:	f000 fdfe 	bl	800184a <HAL_GPIO_WritePin>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40010c00 	.word	0x40010c00

08000c58 <EIGHT>:
void EIGHT(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <EIGHT+0x50>)
 8000c62:	f000 fdf2 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2102      	movs	r1, #2
 8000c6a:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <EIGHT+0x50>)
 8000c6c:	f000 fded 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2104      	movs	r1, #4
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <EIGHT+0x50>)
 8000c76:	f000 fde8 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <EIGHT+0x50>)
 8000c80:	f000 fde3 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <EIGHT+0x50>)
 8000c8a:	f000 fdde 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2120      	movs	r1, #32
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <EIGHT+0x50>)
 8000c94:	f000 fdd9 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <EIGHT+0x50>)
 8000c9e:	f000 fdd4 	bl	800184a <HAL_GPIO_WritePin>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40010c00 	.word	0x40010c00

08000cac <NINE>:
void NINE(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4811      	ldr	r0, [pc, #68]	; (8000cfc <NINE+0x50>)
 8000cb6:	f000 fdc8 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	480f      	ldr	r0, [pc, #60]	; (8000cfc <NINE+0x50>)
 8000cc0:	f000 fdc3 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <NINE+0x50>)
 8000cca:	f000 fdbe 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	480a      	ldr	r0, [pc, #40]	; (8000cfc <NINE+0x50>)
 8000cd4:	f000 fdb9 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2110      	movs	r1, #16
 8000cdc:	4807      	ldr	r0, [pc, #28]	; (8000cfc <NINE+0x50>)
 8000cde:	f000 fdb4 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <NINE+0x50>)
 8000ce8:	f000 fdaf 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2140      	movs	r1, #64	; 0x40
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <NINE+0x50>)
 8000cf2:	f000 fdaa 	bl	800184a <HAL_GPIO_WritePin>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40010c00 	.word	0x40010c00

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d04:	f000 faa0 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d08:	f000 f80c 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0c:	f000 f892 	bl	8000e34 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d10:	f000 f844 	bl	8000d9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <main+0x20>)
 8000d16:	f001 f9dd 	bl	80020d4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_manual();
 8000d1a:	f7ff fd25 	bl	8000768 <fsm_manual>
 8000d1e:	e7fc      	b.n	8000d1a <main+0x1a>
 8000d20:	200000a0 	.word	0x200000a0

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	; 0x40
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2228      	movs	r2, #40	; 0x28
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 fd7e 	bl	8002834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d56:	f107 0318 	add.w	r3, r7, #24
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fd8e 	bl	800187c <HAL_RCC_OscConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d66:	f000 f8e1 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fffa 	bl	8001d7c <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 f8cd 	bl	8000f2c <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3740      	adds	r7, #64	; 0x40
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dc2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000de0:	4813      	ldr	r0, [pc, #76]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000de2:	f001 f927 	bl	8002034 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dec:	f000 f89e 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dfe:	f001 faa5 	bl	800234c <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e08:	f000 f890 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000e1a:	f001 fc7d 	bl	8002718 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 f882 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200000a0 	.word	0x200000a0

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <MX_GPIO_Init+0xd0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <MX_GPIO_Init+0xd0>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_GPIO_Init+0xd0>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <MX_GPIO_Init+0xd0>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a27      	ldr	r2, [pc, #156]	; (8000f04 <MX_GPIO_Init+0xd0>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_GPIO_Init+0xd0>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_GPIO_Init+0xd0>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <MX_GPIO_Init+0xd0>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_GPIO_Init+0xd0>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000e90:	2200      	movs	r2, #0
 8000e92:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000e96:	481c      	ldr	r0, [pc, #112]	; (8000f08 <MX_GPIO_Init+0xd4>)
 8000e98:	f000 fcd7 	bl	800184a <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	217f      	movs	r1, #127	; 0x7f
 8000ea0:	481a      	ldr	r0, [pc, #104]	; (8000f0c <MX_GPIO_Init+0xd8>)
 8000ea2:	f000 fcd2 	bl	800184a <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000ea6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4815      	ldr	r0, [pc, #84]	; (8000f10 <MX_GPIO_Init+0xdc>)
 8000ebc:	f000 fb34 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000ec0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000ec4:	613b      	str	r3, [r7, #16]
                          |GREEN2_Pin|YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <MX_GPIO_Init+0xd4>)
 8000eda:	f000 fb25 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000ede:	237f      	movs	r3, #127	; 0x7f
 8000ee0:	613b      	str	r3, [r7, #16]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_GPIO_Init+0xd8>)
 8000ef6:	f000 fb17 	bl	8001528 <HAL_GPIO_Init>

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	40010c00 	.word	0x40010c00
 8000f10:	40011000 	.word	0x40011000

08000f14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f1c:	f000 f82c 	bl	8000f78 <timerRun>
	getKeyInput();
 8000f20:	f7ff f92e 	bl	8000180 <getKeyInput>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <setTimer>:
#define N0_OF_TIMER 3

int timer_counter[N0_OF_TIMER];
int timer_flag[N0_OF_TIMER];

void setTimer(int index, int counter){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	timer_counter[index] = counter / TICK;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <setTimer+0x34>)
 8000f46:	fb82 1203 	smull	r1, r2, r2, r3
 8000f4a:	1092      	asrs	r2, r2, #2
 8000f4c:	17db      	asrs	r3, r3, #31
 8000f4e:	1ad2      	subs	r2, r2, r3
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <setTimer+0x38>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <setTimer+0x3c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	66666667 	.word	0x66666667
 8000f70:	200000e8 	.word	0x200000e8
 8000f74:	200000f4 	.word	0x200000f4

08000f78 <timerRun>:
void clearTimer(int index){
	timer_counter[index] = 0;
	timer_flag[index] = 0;
}

void timerRun(){
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_TIMER; i++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e01c      	b.n	8000fbe <timerRun+0x46>
		if (timer_counter[i] > 0){
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <timerRun+0x58>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dd13      	ble.n	8000fb8 <timerRun+0x40>
			timer_counter[i]--;
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <timerRun+0x58>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	490d      	ldr	r1, [pc, #52]	; (8000fd0 <timerRun+0x58>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <timerRun+0x58>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	dc04      	bgt.n	8000fb8 <timerRun+0x40>
				timer_flag[i] = 1;
 8000fae:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <timerRun+0x5c>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_TIMER; i++){
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	dddf      	ble.n	8000f84 <timerRun+0xc>
			}
		}
	}
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	200000e8 	.word	0x200000e8
 8000fd4:	200000f4 	.word	0x200000f4

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_MspInit+0x5c>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4a14      	ldr	r2, [pc, #80]	; (8001034 <HAL_MspInit+0x5c>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6193      	str	r3, [r2, #24]
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_MspInit+0x5c>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_MspInit+0x5c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_MspInit+0x5c>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_MspInit+0x5c>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_MspInit+0x60>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_MspInit+0x60>)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40021000 	.word	0x40021000
 8001038:	40010000 	.word	0x40010000

0800103c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800104c:	d113      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_TIM_Base_MspInit+0x44>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_TIM_Base_MspInit+0x44>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	61d3      	str	r3, [r2, #28]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_TIM_Base_MspInit+0x44>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	201c      	movs	r0, #28
 800106c:	f000 fa25 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001070:	201c      	movs	r0, #28
 8001072:	f000 fa3e 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ca:	f000 f903 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <TIM2_IRQHandler+0x10>)
 80010da:	f001 f847 	bl	800216c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000a0 	.word	0x200000a0

080010e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <RED_1>:
 *  Created on: Dec 16, 2024
 *      Author: LENOVO
 */
#include "traffic_light.h"

void RED_1(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2101      	movs	r1, #1
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <RED_1+0x28>)
 80010fe:	f000 fba4 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2102      	movs	r1, #2
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <RED_1+0x28>)
 8001108:	f000 fb9f 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2104      	movs	r1, #4
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <RED_1+0x28>)
 8001112:	f000 fb9a 	bl	800184a <HAL_GPIO_WritePin>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40010800 	.word	0x40010800

08001120 <GREEN_1>:

void GREEN_1(){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2101      	movs	r1, #1
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <GREEN_1+0x28>)
 800112a:	f000 fb8e 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2102      	movs	r1, #2
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <GREEN_1+0x28>)
 8001134:	f000 fb89 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2104      	movs	r1, #4
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <GREEN_1+0x28>)
 800113e:	f000 fb84 	bl	800184a <HAL_GPIO_WritePin>
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40010800 	.word	0x40010800

0800114c <YELLOW_1>:

void YELLOW_1(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2101      	movs	r1, #1
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <YELLOW_1+0x28>)
 8001156:	f000 fb78 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2102      	movs	r1, #2
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <YELLOW_1+0x28>)
 8001160:	f000 fb73 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2104      	movs	r1, #4
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <YELLOW_1+0x28>)
 800116a:	f000 fb6e 	bl	800184a <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40010800 	.word	0x40010800

08001178 <RED_2>:

void RED_2(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2108      	movs	r1, #8
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <RED_2+0x28>)
 8001182:	f000 fb62 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2110      	movs	r1, #16
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <RED_2+0x28>)
 800118c:	f000 fb5d 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2120      	movs	r1, #32
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <RED_2+0x28>)
 8001196:	f000 fb58 	bl	800184a <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800

080011a4 <GREEN_2>:

void GREEN_2(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2108      	movs	r1, #8
 80011ac:	4807      	ldr	r0, [pc, #28]	; (80011cc <GREEN_2+0x28>)
 80011ae:	f000 fb4c 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2110      	movs	r1, #16
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <GREEN_2+0x28>)
 80011b8:	f000 fb47 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2120      	movs	r1, #32
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <GREEN_2+0x28>)
 80011c2:	f000 fb42 	bl	800184a <HAL_GPIO_WritePin>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40010800 	.word	0x40010800

080011d0 <YELLOW_2>:

void YELLOW_2(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2108      	movs	r1, #8
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <YELLOW_2+0x28>)
 80011da:	f000 fb36 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2110      	movs	r1, #16
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <YELLOW_2+0x28>)
 80011e4:	f000 fb31 	bl	800184a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2120      	movs	r1, #32
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <YELLOW_2+0x28>)
 80011ee:	f000 fb2c 	bl	800184a <HAL_GPIO_WritePin>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40010800 	.word	0x40010800

080011fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011fc:	f7ff ff74 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001202:	490c      	ldr	r1, [pc, #48]	; (8001234 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001218:	4c09      	ldr	r4, [pc, #36]	; (8001240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f001 fae1 	bl	80027ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122a:	f7ff fd69 	bl	8000d00 <main>
  bx lr
 800122e:	4770      	bx	lr
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001238:	08002888 	.word	0x08002888
  ldr r2, =_sbss
 800123c:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001240:	20000104 	.word	0x20000104

08001244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_2_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_Init+0x28>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_Init+0x28>)
 8001252:	f043 0310 	orr.w	r3, r3, #16
 8001256:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 f923 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	200f      	movs	r0, #15
 8001260:	f000 f808 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff feb8 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40022000 	.word	0x40022000

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x54>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f93b 	bl	800150e <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e00e      	b.n	80012c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d80a      	bhi.n	80012be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f000 f903 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_InitTick+0x5c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000040 	.word	0x20000040
 80012cc:	20000048 	.word	0x20000048
 80012d0:	20000044 	.word	0x20000044

080012d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x1c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_IncTick+0x20>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a03      	ldr	r2, [pc, #12]	; (80012f4 <HAL_IncTick+0x20>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	20000048 	.word	0x20000048
 80012f4:	20000100 	.word	0x20000100

080012f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b02      	ldr	r3, [pc, #8]	; (8001308 <HAL_GetTick+0x10>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	20000100 	.word	0x20000100

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4906      	ldr	r1, [pc, #24]	; (80013a4 <__NVIC_EnableIRQ+0x34>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff90 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff2d 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff42 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff90 	bl	80013fc <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5f 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff35 	bl	8001370 <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b08b      	sub	sp, #44	; 0x2c
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153a:	e148      	b.n	80017ce <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800153c:	2201      	movs	r2, #1
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	429a      	cmp	r2, r3
 8001556:	f040 8137 	bne.w	80017c8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4aa3      	ldr	r2, [pc, #652]	; (80017ec <HAL_GPIO_Init+0x2c4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d05e      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001564:	4aa1      	ldr	r2, [pc, #644]	; (80017ec <HAL_GPIO_Init+0x2c4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d875      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 800156a:	4aa1      	ldr	r2, [pc, #644]	; (80017f0 <HAL_GPIO_Init+0x2c8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d058      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001570:	4a9f      	ldr	r2, [pc, #636]	; (80017f0 <HAL_GPIO_Init+0x2c8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d86f      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 8001576:	4a9f      	ldr	r2, [pc, #636]	; (80017f4 <HAL_GPIO_Init+0x2cc>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d052      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 800157c:	4a9d      	ldr	r2, [pc, #628]	; (80017f4 <HAL_GPIO_Init+0x2cc>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d869      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 8001582:	4a9d      	ldr	r2, [pc, #628]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d04c      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001588:	4a9b      	ldr	r2, [pc, #620]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d863      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 800158e:	4a9b      	ldr	r2, [pc, #620]	; (80017fc <HAL_GPIO_Init+0x2d4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d046      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001594:	4a99      	ldr	r2, [pc, #612]	; (80017fc <HAL_GPIO_Init+0x2d4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d85d      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 800159a:	2b12      	cmp	r3, #18
 800159c:	d82a      	bhi.n	80015f4 <HAL_GPIO_Init+0xcc>
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d859      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <HAL_GPIO_Init+0x80>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	08001623 	.word	0x08001623
 80015ac:	080015fd 	.word	0x080015fd
 80015b0:	0800160f 	.word	0x0800160f
 80015b4:	08001651 	.word	0x08001651
 80015b8:	08001657 	.word	0x08001657
 80015bc:	08001657 	.word	0x08001657
 80015c0:	08001657 	.word	0x08001657
 80015c4:	08001657 	.word	0x08001657
 80015c8:	08001657 	.word	0x08001657
 80015cc:	08001657 	.word	0x08001657
 80015d0:	08001657 	.word	0x08001657
 80015d4:	08001657 	.word	0x08001657
 80015d8:	08001657 	.word	0x08001657
 80015dc:	08001657 	.word	0x08001657
 80015e0:	08001657 	.word	0x08001657
 80015e4:	08001657 	.word	0x08001657
 80015e8:	08001657 	.word	0x08001657
 80015ec:	08001605 	.word	0x08001605
 80015f0:	08001619 	.word	0x08001619
 80015f4:	4a82      	ldr	r2, [pc, #520]	; (8001800 <HAL_GPIO_Init+0x2d8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d013      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015fa:	e02c      	b.n	8001656 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e029      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	3304      	adds	r3, #4
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e024      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	3308      	adds	r3, #8
 8001614:	623b      	str	r3, [r7, #32]
          break;
 8001616:	e01f      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	330c      	adds	r3, #12
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e01a      	b.n	8001658 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800162a:	2304      	movs	r3, #4
 800162c:	623b      	str	r3, [r7, #32]
          break;
 800162e:	e013      	b.n	8001658 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001638:	2308      	movs	r3, #8
 800163a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	611a      	str	r2, [r3, #16]
          break;
 8001642:	e009      	b.n	8001658 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001644:	2308      	movs	r3, #8
 8001646:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	615a      	str	r2, [r3, #20]
          break;
 800164e:	e003      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
          break;
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x130>
          break;
 8001656:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2bff      	cmp	r3, #255	; 0xff
 800165c:	d801      	bhi.n	8001662 <HAL_GPIO_Init+0x13a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	e001      	b.n	8001666 <HAL_GPIO_Init+0x13e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3304      	adds	r3, #4
 8001666:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2bff      	cmp	r3, #255	; 0xff
 800166c:	d802      	bhi.n	8001674 <HAL_GPIO_Init+0x14c>
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0x152>
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	3b08      	subs	r3, #8
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	210f      	movs	r1, #15
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	401a      	ands	r2, r3
 800168c:	6a39      	ldr	r1, [r7, #32]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	431a      	orrs	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8090 	beq.w	80017c8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a8:	4b56      	ldr	r3, [pc, #344]	; (8001804 <HAL_GPIO_Init+0x2dc>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a55      	ldr	r2, [pc, #340]	; (8001804 <HAL_GPIO_Init+0x2dc>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_GPIO_Init+0x2dc>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c0:	4a51      	ldr	r2, [pc, #324]	; (8001808 <HAL_GPIO_Init+0x2e0>)
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a49      	ldr	r2, [pc, #292]	; (800180c <HAL_GPIO_Init+0x2e4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d00d      	beq.n	8001708 <HAL_GPIO_Init+0x1e0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a48      	ldr	r2, [pc, #288]	; (8001810 <HAL_GPIO_Init+0x2e8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0x1dc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a47      	ldr	r2, [pc, #284]	; (8001814 <HAL_GPIO_Init+0x2ec>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d101      	bne.n	8001700 <HAL_GPIO_Init+0x1d8>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x1e2>
 8001700:	2303      	movs	r3, #3
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x1e2>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x1e2>
 8001708:	2300      	movs	r3, #0
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800171a:	493b      	ldr	r1, [pc, #236]	; (8001808 <HAL_GPIO_Init+0x2e0>)
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001734:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4937      	ldr	r1, [pc, #220]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	43db      	mvns	r3, r3
 800174a:	4933      	ldr	r1, [pc, #204]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 800174c:	4013      	ands	r3, r2
 800174e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	492d      	ldr	r1, [pc, #180]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800176a:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	43db      	mvns	r3, r3
 8001772:	4929      	ldr	r1, [pc, #164]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 8001774:	4013      	ands	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4923      	ldr	r1, [pc, #140]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	491f      	ldr	r1, [pc, #124]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 800179c:	4013      	ands	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4919      	ldr	r1, [pc, #100]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4915      	ldr	r1, [pc, #84]	; (8001818 <HAL_GPIO_Init+0x2f0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	3301      	adds	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f47f aeaf 	bne.w	800153c <HAL_GPIO_Init+0x14>
  }
}
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
 80017e2:	372c      	adds	r7, #44	; 0x2c
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	10320000 	.word	0x10320000
 80017f0:	10310000 	.word	0x10310000
 80017f4:	10220000 	.word	0x10220000
 80017f8:	10210000 	.word	0x10210000
 80017fc:	10120000 	.word	0x10120000
 8001800:	10110000 	.word	0x10110000
 8001804:	40021000 	.word	0x40021000
 8001808:	40010000 	.word	0x40010000
 800180c:	40010800 	.word	0x40010800
 8001810:	40010c00 	.word	0x40010c00
 8001814:	40011000 	.word	0x40011000
 8001818:	40010400 	.word	0x40010400

0800181c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e001      	b.n	800183e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185a:	787b      	ldrb	r3, [r7, #1]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001860:	887a      	ldrh	r2, [r7, #2]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001866:	e003      	b.n	8001870 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001868:	887b      	ldrh	r3, [r7, #2]
 800186a:	041a      	lsls	r2, r3, #16
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	611a      	str	r2, [r3, #16]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
	...

0800187c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e26c      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8087 	beq.w	80019aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800189c:	4b92      	ldr	r3, [pc, #584]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d00c      	beq.n	80018c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a8:	4b8f      	ldr	r3, [pc, #572]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d112      	bne.n	80018da <HAL_RCC_OscConfig+0x5e>
 80018b4:	4b8c      	ldr	r3, [pc, #560]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c0:	d10b      	bne.n	80018da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c2:	4b89      	ldr	r3, [pc, #548]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d06c      	beq.n	80019a8 <HAL_RCC_OscConfig+0x12c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d168      	bne.n	80019a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e246      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x76>
 80018e4:	4b80      	ldr	r3, [pc, #512]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a7f      	ldr	r2, [pc, #508]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e02e      	b.n	8001950 <HAL_RCC_OscConfig+0xd4>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x98>
 80018fa:	4b7b      	ldr	r3, [pc, #492]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a7a      	ldr	r2, [pc, #488]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a77      	ldr	r2, [pc, #476]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0xd4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0xbc>
 800191e:	4b72      	ldr	r3, [pc, #456]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a71      	ldr	r2, [pc, #452]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6e      	ldr	r2, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xd4>
 8001938:	4b6b      	ldr	r3, [pc, #428]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a6a      	ldr	r2, [pc, #424]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b68      	ldr	r3, [pc, #416]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a67      	ldr	r2, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fcce 	bl	80012f8 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fcca 	bl	80012f8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1fa      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0xe4>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fcba 	bl	80012f8 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fcb6 	bl	80012f8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1e6      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x10c>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b6:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019c2:	4b49      	ldr	r3, [pc, #292]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d11c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x18c>
 80019ce:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x176>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e1ba      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4939      	ldr	r1, [pc, #228]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	e03a      	b.n	8001a7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	4b36      	ldr	r3, [pc, #216]	; (8001aec <HAL_RCC_OscConfig+0x270>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff fc6f 	bl	80012f8 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fc6b 	bl	80012f8 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e19b      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4927      	ldr	r1, [pc, #156]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <HAL_RCC_OscConfig+0x270>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fc4e 	bl	80012f8 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fc4a 	bl	80012f8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e17a      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d03a      	beq.n	8001b00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d019      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff fc2e 	bl	80012f8 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fc2a 	bl	80012f8 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e15a      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f000 fa9a 	bl	8001ff8 <RCC_Delay>
 8001ac4:	e01c      	b.n	8001b00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fc14 	bl	80012f8 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad2:	e00f      	b.n	8001af4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fc10 	bl	80012f8 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d908      	bls.n	8001af4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e140      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	42420000 	.word	0x42420000
 8001af0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af4:	4b9e      	ldr	r3, [pc, #632]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1e9      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a6 	beq.w	8001c5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b12:	4b97      	ldr	r3, [pc, #604]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10d      	bne.n	8001b3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b94      	ldr	r3, [pc, #592]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a93      	ldr	r2, [pc, #588]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b91      	ldr	r3, [pc, #580]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3a:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <HAL_RCC_OscConfig+0x4f8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d118      	bne.n	8001b78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b46:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <HAL_RCC_OscConfig+0x4f8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a8a      	ldr	r2, [pc, #552]	; (8001d74 <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b52:	f7ff fbd1 	bl	80012f8 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5a:	f7ff fbcd 	bl	80012f8 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b64      	cmp	r3, #100	; 0x64
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e0fd      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	4b81      	ldr	r3, [pc, #516]	; (8001d74 <HAL_RCC_OscConfig+0x4f8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x312>
 8001b80:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4a7a      	ldr	r2, [pc, #488]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6213      	str	r3, [r2, #32]
 8001b8c:	e02d      	b.n	8001bea <HAL_RCC_OscConfig+0x36e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x334>
 8001b96:	4b76      	ldr	r3, [pc, #472]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a75      	ldr	r2, [pc, #468]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	4b73      	ldr	r3, [pc, #460]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a72      	ldr	r2, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6213      	str	r3, [r2, #32]
 8001bae:	e01c      	b.n	8001bea <HAL_RCC_OscConfig+0x36e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x356>
 8001bb8:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a6c      	ldr	r2, [pc, #432]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a69      	ldr	r2, [pc, #420]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	e00b      	b.n	8001bea <HAL_RCC_OscConfig+0x36e>
 8001bd2:	4b67      	ldr	r3, [pc, #412]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a66      	ldr	r2, [pc, #408]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6213      	str	r3, [r2, #32]
 8001bde:	4b64      	ldr	r3, [pc, #400]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a63      	ldr	r2, [pc, #396]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d015      	beq.n	8001c1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fb81 	bl	80012f8 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fb7d 	bl	80012f8 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0ab      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	4b57      	ldr	r3, [pc, #348]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ee      	beq.n	8001bfa <HAL_RCC_OscConfig+0x37e>
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fb6b 	bl	80012f8 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff fb67 	bl	80012f8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e095      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ee      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d105      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4e:	4b48      	ldr	r3, [pc, #288]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a47      	ldr	r2, [pc, #284]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8081 	beq.w	8001d66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c64:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d061      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d146      	bne.n	8001d06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_RCC_OscConfig+0x4fc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fb3b 	bl	80012f8 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff fb37 	bl	80012f8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e067      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d108      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cae:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	492d      	ldr	r1, [pc, #180]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a19      	ldr	r1, [r3, #32]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	4927      	ldr	r1, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x4fc>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fb0b 	bl	80012f8 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7ff fb07 	bl	80012f8 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e037      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x46a>
 8001d04:	e02f      	b.n	8001d66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_RCC_OscConfig+0x4fc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff faf4 	bl	80012f8 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff faf0 	bl	80012f8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e020      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x498>
 8001d32:	e018      	b.n	8001d66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e013      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40007000 	.word	0x40007000
 8001d78:	42420060 	.word	0x42420060

08001d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0d0      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b67      	ldr	r3, [pc, #412]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4965      	ldr	r1, [pc, #404]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001de2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	494d      	ldr	r1, [pc, #308]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d040      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d115      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e073      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4936      	ldr	r1, [pc, #216]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e6c:	f7ff fa44 	bl	80012f8 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7ff fa40 	bl	80012f8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e053      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d210      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4922      	ldr	r1, [pc, #136]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f821 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	490a      	ldr	r1, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1cc>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1d0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f9a2 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	0800285c 	.word	0x0800285c
 8001f48:	20000040 	.word	0x20000040
 8001f4c:	20000044 	.word	0x20000044

08001f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x30>
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x36>
 8001f7e:	e027      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f82:	613b      	str	r3, [r7, #16]
      break;
 8001f84:	e027      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0c9b      	lsrs	r3, r3, #18
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	4a17      	ldr	r2, [pc, #92]	; (8001fec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f90:	5cd3      	ldrb	r3, [r2, r3]
 8001f92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	0c5b      	lsrs	r3, r3, #17
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb2:	fb02 f203 	mul.w	r2, r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e004      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	613b      	str	r3, [r7, #16]
      break;
 8001fce:	e002      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd2:	613b      	str	r3, [r7, #16]
      break;
 8001fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd6:	693b      	ldr	r3, [r7, #16]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	007a1200 	.word	0x007a1200
 8001fec:	0800286c 	.word	0x0800286c
 8001ff0:	0800287c 	.word	0x0800287c
 8001ff4:	003d0900 	.word	0x003d0900

08001ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <RCC_Delay+0x34>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <RCC_Delay+0x38>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0a5b      	lsrs	r3, r3, #9
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002014:	bf00      	nop
  }
  while (Delay --);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	60fa      	str	r2, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f9      	bne.n	8002014 <RCC_Delay+0x1c>
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000040 	.word	0x20000040
 8002030:	10624dd3 	.word	0x10624dd3

08002034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e041      	b.n	80020ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe ffee 	bl	800103c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 fa56 	bl	8002524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d001      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e035      	b.n	8002158 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_TIM_Base_Start_IT+0x90>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d009      	beq.n	8002122 <HAL_TIM_Base_Start_IT+0x4e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002116:	d004      	beq.n	8002122 <HAL_TIM_Base_Start_IT+0x4e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_TIM_Base_Start_IT+0x94>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d111      	bne.n	8002146 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b06      	cmp	r3, #6
 8002132:	d010      	beq.n	8002156 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002144:	e007      	b.n	8002156 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40012c00 	.word	0x40012c00
 8002168:	40000400 	.word	0x40000400

0800216c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d020      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01b      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0202 	mvn.w	r2, #2
 80021a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f998 	bl	80024ec <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f98b 	bl	80024da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f99a 	bl	80024fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d020      	beq.n	800221c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01b      	beq.n	800221c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0204 	mvn.w	r2, #4
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f972 	bl	80024ec <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f965 	bl	80024da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f974 	bl	80024fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d020      	beq.n	8002268 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01b      	beq.n	8002268 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0208 	mvn.w	r2, #8
 8002238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2204      	movs	r2, #4
 800223e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f94c 	bl	80024ec <HAL_TIM_IC_CaptureCallback>
 8002254:	e005      	b.n	8002262 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f93f 	bl	80024da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f94e 	bl	80024fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d020      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0210 	mvn.w	r2, #16
 8002284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2208      	movs	r2, #8
 800228a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f926 	bl	80024ec <HAL_TIM_IC_CaptureCallback>
 80022a0:	e005      	b.n	80022ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f919 	bl	80024da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f928 	bl	80024fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00c      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0201 	mvn.w	r2, #1
 80022d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fe1e 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fa6f 	bl	80027da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00c      	beq.n	8002320 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f8f8 	bl	8002510 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00c      	beq.n	8002344 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0220 	mvn.w	r2, #32
 800233c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa42 	bl	80027c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_TIM_ConfigClockSource+0x1c>
 8002364:	2302      	movs	r3, #2
 8002366:	e0b4      	b.n	80024d2 <HAL_TIM_ConfigClockSource+0x186>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800238e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a0:	d03e      	beq.n	8002420 <HAL_TIM_ConfigClockSource+0xd4>
 80023a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a6:	f200 8087 	bhi.w	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ae:	f000 8086 	beq.w	80024be <HAL_TIM_ConfigClockSource+0x172>
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	d87f      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023b8:	2b70      	cmp	r3, #112	; 0x70
 80023ba:	d01a      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0xa6>
 80023bc:	2b70      	cmp	r3, #112	; 0x70
 80023be:	d87b      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023c0:	2b60      	cmp	r3, #96	; 0x60
 80023c2:	d050      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x11a>
 80023c4:	2b60      	cmp	r3, #96	; 0x60
 80023c6:	d877      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023c8:	2b50      	cmp	r3, #80	; 0x50
 80023ca:	d03c      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xfa>
 80023cc:	2b50      	cmp	r3, #80	; 0x50
 80023ce:	d873      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d058      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x13a>
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d86f      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023d8:	2b30      	cmp	r3, #48	; 0x30
 80023da:	d064      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x15a>
 80023dc:	2b30      	cmp	r3, #48	; 0x30
 80023de:	d86b      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d060      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x15a>
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d867      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05c      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x15a>
 80023ec:	2b10      	cmp	r3, #16
 80023ee:	d05a      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x15a>
 80023f0:	e062      	b.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f000 f96a 	bl	80026da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	609a      	str	r2, [r3, #8]
      break;
 800241e:	e04f      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f000 f953 	bl	80026da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002442:	609a      	str	r2, [r3, #8]
      break;
 8002444:	e03c      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	461a      	mov	r2, r3
 8002454:	f000 f8ca 	bl	80025ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2150      	movs	r1, #80	; 0x50
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f921 	bl	80026a6 <TIM_ITRx_SetConfig>
      break;
 8002464:	e02c      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	f000 f8e8 	bl	8002648 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2160      	movs	r1, #96	; 0x60
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f911 	bl	80026a6 <TIM_ITRx_SetConfig>
      break;
 8002484:	e01c      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	461a      	mov	r2, r3
 8002494:	f000 f8aa 	bl	80025ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f901 	bl	80026a6 <TIM_ITRx_SetConfig>
      break;
 80024a4:	e00c      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f000 f8f8 	bl	80026a6 <TIM_ITRx_SetConfig>
      break;
 80024b6:	e003      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      break;
 80024bc:	e000      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
	...

08002524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <TIM_Base_SetConfig+0xc0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d007      	beq.n	800254c <TIM_Base_SetConfig+0x28>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002542:	d003      	beq.n	800254c <TIM_Base_SetConfig+0x28>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <TIM_Base_SetConfig+0xc4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d108      	bne.n	800255e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <TIM_Base_SetConfig+0xc0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <TIM_Base_SetConfig+0x52>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256c:	d003      	beq.n	8002576 <TIM_Base_SetConfig+0x52>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <TIM_Base_SetConfig+0xc4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d108      	bne.n	8002588 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <TIM_Base_SetConfig+0xc0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d103      	bne.n	80025bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f023 0201 	bic.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	611a      	str	r2, [r3, #16]
  }
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40000400 	.word	0x40000400

080025ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	f023 0201 	bic.w	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f023 030a 	bic.w	r3, r3, #10
 8002628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	621a      	str	r2, [r3, #32]
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f023 0210 	bic.w	r2, r3, #16
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	031b      	lsls	r3, r3, #12
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002684:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	621a      	str	r2, [r3, #32]
}
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f043 0307 	orr.w	r3, r3, #7
 80026c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	609a      	str	r2, [r3, #8]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026da:	b480      	push	{r7}
 80026dc:	b087      	sub	sp, #28
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	021a      	lsls	r2, r3, #8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4313      	orrs	r3, r2
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	609a      	str	r2, [r3, #8]
}
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800272c:	2302      	movs	r3, #2
 800272e:	e041      	b.n	80027b4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d009      	beq.n	8002788 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277c:	d004      	beq.n	8002788 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d10c      	bne.n	80027a2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800278e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	4313      	orrs	r3, r2
 8002798:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40000400 	.word	0x40000400

080027c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <__libc_init_array>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	2600      	movs	r6, #0
 80027f0:	4d0c      	ldr	r5, [pc, #48]	; (8002824 <__libc_init_array+0x38>)
 80027f2:	4c0d      	ldr	r4, [pc, #52]	; (8002828 <__libc_init_array+0x3c>)
 80027f4:	1b64      	subs	r4, r4, r5
 80027f6:	10a4      	asrs	r4, r4, #2
 80027f8:	42a6      	cmp	r6, r4
 80027fa:	d109      	bne.n	8002810 <__libc_init_array+0x24>
 80027fc:	f000 f822 	bl	8002844 <_init>
 8002800:	2600      	movs	r6, #0
 8002802:	4d0a      	ldr	r5, [pc, #40]	; (800282c <__libc_init_array+0x40>)
 8002804:	4c0a      	ldr	r4, [pc, #40]	; (8002830 <__libc_init_array+0x44>)
 8002806:	1b64      	subs	r4, r4, r5
 8002808:	10a4      	asrs	r4, r4, #2
 800280a:	42a6      	cmp	r6, r4
 800280c:	d105      	bne.n	800281a <__libc_init_array+0x2e>
 800280e:	bd70      	pop	{r4, r5, r6, pc}
 8002810:	f855 3b04 	ldr.w	r3, [r5], #4
 8002814:	4798      	blx	r3
 8002816:	3601      	adds	r6, #1
 8002818:	e7ee      	b.n	80027f8 <__libc_init_array+0xc>
 800281a:	f855 3b04 	ldr.w	r3, [r5], #4
 800281e:	4798      	blx	r3
 8002820:	3601      	adds	r6, #1
 8002822:	e7f2      	b.n	800280a <__libc_init_array+0x1e>
 8002824:	08002880 	.word	0x08002880
 8002828:	08002880 	.word	0x08002880
 800282c:	08002880 	.word	0x08002880
 8002830:	08002884 	.word	0x08002884

08002834 <memset>:
 8002834:	4603      	mov	r3, r0
 8002836:	4402      	add	r2, r0
 8002838:	4293      	cmp	r3, r2
 800283a:	d100      	bne.n	800283e <memset+0xa>
 800283c:	4770      	bx	lr
 800283e:	f803 1b01 	strb.w	r1, [r3], #1
 8002842:	e7f9      	b.n	8002838 <memset+0x4>

08002844 <_init>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	bf00      	nop
 8002848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284a:	bc08      	pop	{r3}
 800284c:	469e      	mov	lr, r3
 800284e:	4770      	bx	lr

08002850 <_fini>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	bf00      	nop
 8002854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002856:	bc08      	pop	{r3}
 8002858:	469e      	mov	lr, r3
 800285a:	4770      	bx	lr
